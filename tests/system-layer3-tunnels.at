AT_BANNER([layer3-tunnels])

AT_SETUP([layer3 - ping over VXLAN-GPE])
OVS_TRAFFIC_VSWITCHD_START([set Bridge br0 other-config:hwaddr="00:12:34:56:78:bb"])
OVS_CHECK_VXLAN_GPE()
OVS_CHECK_IPROUTE_ENCAP()

ADD_BR([br-underlay])

ADD_NAMESPACES(at_ns0)

dnl Set up underlay link from host into the namespace using veth pair.
ADD_VETH(p0, at_ns0, br-underlay, "172.31.1.1/24")
AT_CHECK([ip addr add dev br-underlay "172.31.1.100/24"])
AT_CHECK([ip link set dev br-underlay up])

dnl Set up tunnel endpoints on OVS outside the namespace and with a native
dnl linux device inside the namespace.
ADD_OVS_TUNNEL([vxlan], [br0], [at_vxlan0], [172.31.1.1], [10.1.1.2/24],
               [options:packet_type=legacy_l3 options:exts=gpe])
AT_CHECK([ip neigh add 10.1.1.1 lladdr 00:12:34:56:78:aa dev br0])
NS_CHECK_EXEC([at_ns0], [ip link add dev at_vxlan1 type vxlan dstport 4789 external gpe])
NS_CHECK_EXEC([at_ns0], [ip addr add dev at_vxlan1 10.1.1.1/24])
NS_CHECK_EXEC([at_ns0], [ip link set dev at_vxlan1 mtu 1450 up])
NS_CHECK_EXEC([at_ns0], [ip route add 10.1.1.2/32 encap ip id 0 dst 172.31.1.100 dev at_vxlan1])

AT_CHECK([ovs-ofctl add-flow br-underlay "actions=normal"])

dnl Now add rules for OVS to forward to the tunnel and local port
AT_CHECK([ovs-ofctl add-flow br0 "priority=1 action=drop"])
AT_CHECK([ovs-ofctl add-flow br0 "priority=100 ip,nw_dst=10.1.1.1 action=output:at_vxlan0"])
AT_CHECK([ovs-ofctl add-flow br0 "priority=100 ip,nw_dst=10.1.1.2 action=mod_dl_src:00:12:34:56:78:aa,mod_dl_dst:00:12:34:56:78:bb,local"])

OVS_WAIT_UNTIL([ip netns exec at_ns0 ping -c 1 10.1.1.2])

dnl First, check the underlay
NS_CHECK_EXEC([at_ns0], [ping -q -c 3 -i 0.3 -w 2 172.31.1.100 | FORMAT_PING], [0], [dnl
3 packets transmitted, 3 received, 0% packet loss, time 0ms
])

dnl Okay, now check the overlay with different packet sizes
NS_CHECK_EXEC([at_ns0], [ping -q -c 3 -i 0.3 -w 2 10.1.1.2 | FORMAT_PING], [0], [dnl
3 packets transmitted, 3 received, 0% packet loss, time 0ms
])
NS_CHECK_EXEC([at_ns0], [ping -s 3200 -q -c 3 -i 0.3 -w 2 10.1.1.2 | FORMAT_PING], [0], [dnl
3 packets transmitted, 3 received, 0% packet loss, time 0ms
])

OVS_TRAFFIC_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([layer3 - ping over GRE])
OVS_TRAFFIC_VSWITCHD_START([set Bridge br0 other-config:hwaddr="00:12:34:56:78:bb"])
OVS_CHECK_GRE_L3()
OVS_CHECK_IPROUTE_ENCAP()


ADD_BR([br-underlay])

ADD_NAMESPACES(at_ns0)

dnl Set up underlay link from host into the namespace using veth pair.
ADD_VETH(p0, at_ns0, br-underlay, "172.31.1.1/24")
AT_CHECK([ip addr add dev br-underlay "172.31.1.100/24"])
AT_CHECK([ip link set dev br-underlay up])

dnl Set up tunnel endpoints on OVS outside the namespace and with a native
dnl linux device inside the namespace.
ADD_OVS_TUNNEL([gre], [br0], [at_gre0], [172.31.1.1], [10.1.1.2/24],
               [options:packet_type=legacy_l3])
AT_CHECK([ip neigh add 10.1.1.1 lladdr 00:12:34:56:78:aa dev br0])
NS_CHECK_EXEC([at_ns0], [ip link add dev at_gre1 type gre remote 172.31.1.100])
NS_CHECK_EXEC([at_ns0], [ip addr add dev at_gre1 10.1.1.1/24])
NS_CHECK_EXEC([at_ns0], [ip link set dev at_gre1 mtu 1450 up])
NS_CHECK_EXEC([at_ns0], [ip route add 10.1.1.2/32 encap ip id 0 dst 172.31.1.100 dev at_gre1])

AT_CHECK([ovs-ofctl add-flow br-underlay "actions=normal"])

dnl Now add rules for OVS to forward to the tunnel and local port
AT_CHECK([ovs-ofctl add-flow br0 "priority=1 action=drop"])
AT_CHECK([ovs-ofctl add-flow br0 "priority=100 ip,nw_dst=10.1.1.1 action=output:at_gre0"])
AT_CHECK([ovs-ofctl add-flow br0 "priority=100 ip,nw_dst=10.1.1.2 action=mod_dl_src:00:12:34:56:78:aa,mod_dl_dst:00:12:34:56:78:bb,local"])

OVS_WAIT_UNTIL([ip netns exec at_ns0 ping -c 1 10.1.1.2])

dnl First, check the underlay
NS_CHECK_EXEC([at_ns0], [ping -q -c 3 -i 0.3 -w 2 172.31.1.100 | FORMAT_PING], [0], [dnl
3 packets transmitted, 3 received, 0% packet loss, time 0ms
])

dnl Okay, now check the overlay with different packet sizes
NS_CHECK_EXEC([at_ns0], [ping -q -c 3 -i 0.3 -w 2 10.1.1.2 | FORMAT_PING], [0], [dnl
3 packets transmitted, 3 received, 0% packet loss, time 0ms
])
NS_CHECK_EXEC([at_ns0], [ping -s 3200 -q -c 3 -i 0.3 -w 2 10.1.1.2 | FORMAT_PING], [0], [dnl
3 packets transmitted, 3 received, 0% packet loss, time 0ms
])

OVS_TRAFFIC_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([layer3 - use non-local port as tunnel endpoint])

OVS_VSWITCHD_START([add-port br0 p0 -- set Interface p0 type=dummy ofport_request=1])
AT_CHECK([ovs-vsctl add-port br0 vtep0 -- set int vtep0 type=dummy], [0])
AT_CHECK([ovs-vsctl add-br int-br -- set bridge int-br datapath_type=dummy], [0])
AT_CHECK([ovs-vsctl add-port int-br t1 -- set Interface t1 type=gre \
                    options:remote_ip=1.1.2.92 ofport_request=3], [0])

AT_CHECK([ovs-appctl dpif/show], [0], [dnl
dummy@ovs-dummy: hit:0 missed:0
  br0:
    br0 65534/100: (dummy-internal)
    p0 1/1: (dummy)
    vtep0 2/2: (dummy)
  int-br:
    int-br 65534/3: (dummy-internal)
    t1 3/4: (gre: remote_ip=1.1.2.92)
])

AT_CHECK([ovs-appctl netdev-dummy/ip4addr vtep0 1.1.2.88/24], [0], [OK
])
AT_CHECK([ovs-appctl ovs/route/add 1.1.2.92/24 vtep0], [0], [OK
])
AT_CHECK([ovs-ofctl add-flow br0 action=normal])
AT_CHECK([ovs-ofctl add-flow int-br action=normal])

dnl Use arp request and reply to achieve tunnel next hop mac binding
dnl By default, vtep0's MAC address is aa:55:aa:55:00:03
AT_CHECK([ovs-appctl netdev-dummy/receive vtep0 'recirc_id(0),in_port(2),eth(dst=ff:ff:ff:ff:ff:ff,src=aa:55:aa:55:00:03),eth_type(0x0806),arp(tip=1.1.2.92,sip=1.1.2.88,op=1,sha=aa:55:aa:55:00:03,tha=00:00:00:00:00:00)'])
AT_CHECK([ovs-appctl netdev-dummy/receive p0 'recirc_id(0),in_port(1),eth(src=f8:bc:12:44:34:b6,dst=aa:55:aa:55:00:03),eth_type(0x0806),arp(sip=1.1.2.92,tip=1.1.2.88,op=2,sha=f8:bc:12:44:34:b6,tha=aa:55:aa:55:00:03)'])

AT_CHECK([ovs-appctl tnl/neigh/show | tail -n+3 | sort], [0], [dnl
1.1.2.92                                      f8:bc:12:44:34:b6   br0
])

AT_CHECK([ovs-appctl ovs/route/show | tail -n+2 | sort], [0], [dnl
User: 1.1.2.0/24 dev vtep0 SRC 1.1.2.88
])

dnl Check GRE tunnel pop
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'in_port(1),eth(src=f8:bc:12:44:34:b6,dst=aa:55:aa:55:00:03),eth_type(0x0800),ipv4(src=1.1.2.92,dst=1.1.2.88,proto=47,tos=0,ttl=64,frag=no)'], [0], [stdout])

AT_CHECK([tail -1 stdout], [0],
  [Datapath actions: tnl_pop(4)
])

dnl Check GRE tunnel push
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'in_port(3),eth(dst=f9:bc:12:44:34:b6,src=af:55:aa:55:00:03),eth_type(0x0800),ipv4(src=1.1.3.88,dst=1.1.3.92,proto=1,tos=0,ttl=64,frag=no)'], [0], [stdout])
AT_CHECK([tail -1 stdout], [0],
  [Datapath actions: clone(tnl_push(tnl_port(4),header(size=38,type=3,eth(dst=f8:bc:12:44:34:b6,src=aa:55:aa:55:00:03,dl_type=0x0800),ipv4(src=1.1.2.88,dst=1.1.2.92,proto=47,tos=0,ttl=64,frag=0x4000),gre((flags=0x0,proto=0x6558))),out_port(2)),1)
])

OVS_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([layer3 - ping over MPLS Bareudp])
OVS_CHECK_MIN_KERNEL(5, 7)
OVS_TRAFFIC_VSWITCHD_START([_ADD_BR([br1])])
ADD_NAMESPACES(at_ns0, at_ns1)

ADD_VETH(p0, at_ns0, br0, "10.1.1.1/24", "36:b1:ee:7c:01:01")
ADD_VETH(p1, at_ns1, br1, "10.1.1.2/24", "36:b1:ee:7c:01:02")

ADD_OVS_TUNNEL([bareudp], [br0], [at_bareudp0], [8.1.1.3], [8.1.1.2/24],
               [ options:local_ip=8.1.1.2 options:packet_type="legacy_l3" options:payload_type=mpls options:dst_port=6635])

ADD_OVS_TUNNEL([bareudp], [br1], [at_bareudp1], [8.1.1.2], [8.1.1.3/24],
               [options:local_ip=8.1.1.3 options:packet_type="legacy_l3" options:payload_type=mpls options:dst_port=6635])

AT_DATA([flows0.txt], [dnl
table=0,priority=100,dl_type=0x0800 actions=push_mpls:0x8847,set_mpls_label:3,output:at_bareudp0
table=0,priority=100,dl_type=0x8847 in_port=at_bareudp0 actions=pop_mpls:0x0800,set_field:36:b1:ee:7c:01:01->dl_dst,set_field:36:b1:ee:7c:01:02->dl_src,output:ovs-p0
table=0,priority=10 actions=normal
])

AT_DATA([flows1.txt], [dnl
table=0,priority=100,dl_type=0x0800 actions=push_mpls:0x8847,set_mpls_label:3,output:at_bareudp1
table=0,priority=100,dl_type=0x8847 in_port=at_bareudp1 actions=pop_mpls:0x0800,set_field:36:b1:ee:7c:01:02->dl_dst,set_field:36:b1:ee:7c:01:01->dl_src,output:ovs-p1
table=0,priority=10 actions=normal
])

AT_CHECK([ip link add patch0 type veth peer name patch1])
on_exit 'ip link del patch0'

AT_CHECK([ip link set dev patch0 up])
AT_CHECK([ip link set dev patch1 up])
AT_CHECK([ovs-vsctl add-port br0 patch0])
AT_CHECK([ovs-vsctl add-port br1 patch1])


AT_CHECK([ovs-ofctl -O OpenFlow13 add-flows br0 flows0.txt])
AT_CHECK([ovs-ofctl -O OpenFlow13 add-flows br1 flows1.txt])

NS_CHECK_EXEC([at_ns0], [ping -q -c 3 -i 0.3 -w 2 10.1.1.2 | FORMAT_PING], [0], [dnl
3 packets transmitted, 3 received, 0% packet loss, time 0ms
])

NS_CHECK_EXEC([at_ns1], [ping -q -c 3 -i 0.3 -w 2 10.1.1.1 | FORMAT_PING], [0], [dnl
3 packets transmitted, 3 received, 0% packet loss, time 0ms
])
OVS_TRAFFIC_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([layer3 - ping over Bareudp])
OVS_CHECK_MIN_KERNEL(5, 7)
OVS_TRAFFIC_VSWITCHD_START([_ADD_BR([br1])])
ADD_NAMESPACES(at_ns0, at_ns1)

ADD_VETH(p0, at_ns0, br0, "10.1.1.1/24", "36:b1:ee:7c:01:01")
ADD_VETH(p1, at_ns1, br1, "10.1.1.2/24", "36:b1:ee:7c:01:02")

ADD_OVS_TUNNEL([bareudp], [br0], [at_bareudp0], [8.1.1.3], [8.1.1.2/24],
               [ options:local_ip=8.1.1.2 options:packet_type="legacy_l3" options:payload_type=ip options:dst_port=6636])

ADD_OVS_TUNNEL([bareudp], [br1], [at_bareudp1], [8.1.1.2], [8.1.1.3/24],
               [options:local_ip=8.1.1.3 options:packet_type="legacy_l3" options:payload_type=ip options:dst_port=6636])

AT_DATA([flows0.txt], [dnl
table=0,priority=100,dl_type=0x0800 in_port=ovs-p0, actions=output:at_bareudp0
table=0,priority=100,dl_type=0x0800 in_port=at_bareudp0 actions=set_field:36:b1:ee:7c:01:01->dl_dst,set_field:36:b1:ee:7c:01:02->dl_src,output:ovs-p0
table=0,priority=10 actions=normal
])

AT_DATA([flows1.txt], [dnl
table=0,priority=100,dl_type=0x0800 in_port=ovs-p1 actions=output:at_bareudp1
table=0,priority=100,dl_type=0x0800 in_port=at_bareudp1 actions=set_field:36:b1:ee:7c:01:02->dl_dst,set_field:36:b1:ee:7c:01:01->dl_src,output:ovs-p1
table=0,priority=10 actions=normal
])

AT_CHECK([ip link add patch0 type veth peer name patch1])
on_exit 'ip link del patch0'

AT_CHECK([ip link set dev patch0 up])
AT_CHECK([ip link set dev patch1 up])
AT_CHECK([ovs-vsctl add-port br0 patch0])
AT_CHECK([ovs-vsctl add-port br1 patch1])


AT_CHECK([ovs-ofctl -O OpenFlow13 add-flows br0 flows0.txt])
AT_CHECK([ovs-ofctl -O OpenFlow13 add-flows br1 flows1.txt])

NS_CHECK_EXEC([at_ns0], [ping -q -c 3 -i 0.3 -w 2 10.1.1.2 | FORMAT_PING], [0], [dnl
3 packets transmitted, 3 received, 0% packet loss, time 0ms
])

NS_CHECK_EXEC([at_ns1], [ping -q -c 3 -i 0.3 -w 2 10.1.1.1 | FORMAT_PING], [0], [dnl
3 packets transmitted, 3 received, 0% packet loss, time 0ms
])

OVS_TRAFFIC_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([layer3 - ping over GTP])
OVS_TRAFFIC_VSWITCHD_START([set Bridge br0 other-config:hwaddr="00:12:34:56:78:bb"])
OVS_CHECK_GTP_L3()
OVS_CHECK_MIN_KERNEL(4,10)

ADD_BR([br-underlay])

ADD_NAMESPACES(at_ns0)

dnl Set up underlay link from host into the namespace using veth pair.
ADD_VETH(p0, at_ns0, br-underlay, "172.31.1.1/24")
AT_CHECK([ip addr add dev br-underlay "172.31.1.100/24"])
AT_CHECK([ip link set dev br-underlay up])
AT_CHECK([modprobe vport_gtp])

dnl Set up tunnel endpoints on OVS outside the namespace and with a native
dnl linux device inside the namespace.

ADD_OVS_TUNNEL([gtpu], [br0], [at_gtp0], [172.31.1.1], [10.1.1.2/24])
AT_CHECK([ip neigh add 10.1.1.1 lladdr 00:12:34:56:78:aa dev br0])
NS_CHECK_EXEC([at_ns0], [gtp-link add at_gtp1 --sgsn &], [0], [ignore])
dnl kernel 4.9
dnl NS_CHECK_EXEC([at_ns0], [gtp-tunnel add at_gtp1 v1 0 0 10.1.1.2 172.31.1.100], [0], [ignore], [ignore])
NS_CHECK_EXEC([at_ns0], [gtp-tunnel add at_gtp1 v1 0 0 10.1.1.1 172.31.1.100], [0], [ignore], [ignore])
NS_CHECK_EXEC([at_ns0], [ip addr add dev at_gtp1 10.1.1.1/24])
NS_CHECK_EXEC([at_ns0], [ip link set dev at_gtp1 mtu 1450 up])
NS_CHECK_EXEC([at_ns0], [ip link set dev p0 mtu 1480 up])

AT_CHECK([ovs-ofctl add-flow br-underlay "actions=normal"])

AT_CHECK([ovs-appctl vlog/set dbg], [0], [ignore])
AT_CHECK([echo 'module openvswitch +p' > /sys/kernel/debug/dynamic_debug/control])

dnl Now add rules for OVS to forward to the tunnel and local port
AT_CHECK([ovs-ofctl add-flow br0 "priority=1 action=drop"])
AT_CHECK([ovs-ofctl add-flow br0 "priority=100 ip,nw_dst=10.1.1.1 action=output:at_gtp0"])
AT_CHECK([ovs-ofctl add-flow br0 "priority=100 ip,nw_dst=10.1.1.2 action=mod_dl_src:00:12:34:56:78:aa,mod_dl_dst:00:12:34:56:78:bb,local"])


dnl First, check the underlay
NS_CHECK_EXEC([at_ns0], [ping -q -c 3 -i 0.3 -w 2 172.31.1.100 | FORMAT_PING], [0], [dnl
3 packets transmitted, 3 received, 0% packet loss, time 0ms
])

OVS_WAIT_UNTIL([ip netns exec at_ns0 ping -c 1 10.1.1.2])
dnl Okay, now check the overlay with different packet sizes
NS_CHECK_EXEC([at_ns0], [ping -q -c 3 -i 0.3 -w 2 10.1.1.2 | FORMAT_PING], [0], [dnl
3 packets transmitted, 3 received, 0% packet loss, time 0ms
])
NS_CHECK_EXEC([at_ns0], [ping -s 3200 -q -c 3 -i 0.3 -w 2 10.1.1.2 | FORMAT_PING], [0], [dnl
3 packets transmitted, 3 received, 0% packet loss, time 0ms
])
AT_CHECK([ovs-vsctl set interface at_gtp0 bfd:enable=true])
AT_CHECK([ovs-vsctl set interface at_gtp0 bfd:min_tx=5000 bfd:min_rx=5000])

sleep 2
NS_CHECK_EXEC([at_ns0], [ping -q -c 3 -i 0.3 -w 2 10.1.1.2 | FORMAT_PING], [0], [dnl
3 packets transmitted, 3 received, 0% packet loss, time 0ms
])
NS_CHECK_EXEC([at_ns0], [ping -s 3200 -q -c 3 -i 0.3 -w 2 10.1.1.2 | FORMAT_PING], [0], [dnl
3 packets transmitted, 3 received, 0% packet loss, time 0ms
])

dnl sleep 10000
OVS_TRAFFIC_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([layer3 - IPv6 packets over IPv6 GTP])
OVS_TRAFFIC_VSWITCHD_START([set Bridge br0 other-config:hwaddr="00:12:34:56:78:bb"])
OVS_CHECK_GTP_L3()
OVS_CHECK_MIN_KERNEL(4,10)

ADD_BR([br-underlay])

ADD_NAMESPACES(at_ns0)

dnl Set up underlay link from host into the namespace using veth pair.
ADD_VETH(p0, at_ns0, br-underlay, "fc00::55:0:111/48")
AT_CHECK([ip -6 addr add dev br-underlay "fc00::55:0:211/48"])
AT_CHECK([ip -6 link set dev br-underlay up])

AT_CHECK([modprobe vport_gtp])

dnl Set up tunnel endpoints on OVS outside the namespace and with a native
dnl linux device inside the namespace.

ADD_OVS_TUNNEL([gtpu], [br0], [at_gtp0], [fc00::55:0:111], [2001::2/64])
AT_CHECK([ip -6 neigh add 2001::1 lladdr 00:12:34:56:78:aa dev br0])

NS_CHECK_EXEC([at_ns0], [ip link set dev lo up])
NS_CHECK_EXEC([at_ns0], [ip -6 addr add dev lo 2005:cafe::92/64])

AT_CHECK([ovs-ofctl add-flow br-underlay "actions=normal"])

AT_CHECK([ovs-appctl vlog/set dbg], [0], [ignore])
AT_CHECK([echo 'module openvswitch +p' > /sys/kernel/debug/dynamic_debug/control])

dnl Now add rules for OVS to forward to the tunnel and local port
AT_CHECK([ovs-ofctl add-flow br0 "priority=1 action=drop"])
AT_CHECK([ovs-ofctl add-flow br0 "priority=100 ip6,ipv6_dst=2001::1 action=output:at_gtp0"])
AT_CHECK([ovs-ofctl add-flow br0 "priority=100 ip6,ipv6_dst=2001::2 action=drop"])

AT_CHECK([ovs-ofctl dump-flows br0 | grep "ipv6" | ofctl_strip], [0], [dnl
 priority=100,ipv6,ipv6_dst=2001::1 actions=output:1
 priority=100,ipv6,ipv6_dst=2001::2 actions=drop
])

sleep 1
NS_CHECK_EXEC([at_ns0], [python3 $srcdir/gtp-packet.py fc00::55:0:111 fc00::55:0:211 2001::1 2001::2 5555 p0 False 1234 2>/dev/null], [0], [dnl
.
Sent 1 packets.
])

AT_CHECK([ovs-ofctl dump-flows br0 | ofctl_strip | grep ipv6 ], [0], [dnl
 priority=100,ipv6,ipv6_dst=2001::1 actions=output:1
 n_packets=1, n_bytes=63, priority=100,ipv6,ipv6_dst=2001::2 actions=drop
])

NS_CHECK_EXEC([at_ns0], [tcpdump -l -n -xx -U ip6 host fc00::55:0:111 -i p0 > ipv6_xmit.pcap  2>/dev/null &])

sleep 1
AT_CHECK([ping -6 2001::1 -q -c 3 -I br0 2>/dev/null | FORMAT_PING], [0], [dnl
3 packets transmitted, 0 received, 100% packet loss, time 0ms
])

OVS_WAIT_UNTIL([cat ipv6_xmit.pcap | egrep "IP6 fc00::55:0:211.2152 > fc00::55:0:111.2152: UDP, length 112" 2>&1 1>/dev/null])

AT_CHECK([ovs-ofctl dump-flows br0 | ofctl_strip | grep ipv6 ], [0], [dnl
 n_packets=3, n_bytes=354, priority=100,ipv6,ipv6_dst=2001::1 actions=output:1
 n_packets=1, n_bytes=63, priority=100,ipv6,ipv6_dst=2001::2 actions=drop
])

dnl sleep 1000
OVS_TRAFFIC_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([layer3 - IPv6 packets over IPv4 GTP])
OVS_TRAFFIC_VSWITCHD_START([set Bridge br0 other-config:hwaddr="00:12:34:56:78:bb"])
OVS_CHECK_GTP_L3()
OVS_CHECK_MIN_KERNEL(4,10)

ADD_BR([br-underlay])

ADD_NAMESPACES(at_ns0)

dnl Set up underlay link from host into the namespace using veth pair.
ADD_VETH(p0, at_ns0, br-underlay, "172.31.1.1/24")
AT_CHECK([ip addr add dev br-underlay "172.31.1.100/24"])
AT_CHECK([ip link set dev br-underlay up])

AT_CHECK([modprobe vport_gtp])

dnl Set up tunnel endpoints on OVS outside the namespace and with a native
dnl linux device inside the namespace.

ADD_OVS_TUNNEL([gtpu], [br0], [at_gtp0], [172.31.1.1], [2001::2/64])
AT_CHECK([ip -6 neigh add 2001::1 lladdr 00:12:34:56:78:aa dev br0])

NS_CHECK_EXEC([at_ns0], [ip link set dev lo up])
NS_CHECK_EXEC([at_ns0], [ip -6 addr add dev lo 2005:cafe::92/64])

AT_CHECK([ovs-ofctl add-flow br-underlay "actions=normal"])

AT_CHECK([ovs-appctl vlog/set dbg], [0], [ignore])
AT_CHECK([echo 'module openvswitch +p' > /sys/kernel/debug/dynamic_debug/control])

dnl Now add rules for OVS to forward to the tunnel and local port
AT_CHECK([ovs-ofctl add-flow br0 "priority=1 action=drop"])
AT_CHECK([ovs-ofctl add-flow br0 "priority=100 ip6,ipv6_dst=2001::1 action=output:at_gtp0"])
AT_CHECK([ovs-ofctl add-flow br0 "priority=100 ip6,ipv6_dst=2001::2 action=drop"])

AT_CHECK([ovs-ofctl dump-flows br0 | grep "ipv6" | ofctl_strip], [0], [dnl
 priority=100,ipv6,ipv6_dst=2001::1 actions=output:1
 priority=100,ipv6,ipv6_dst=2001::2 actions=drop
])

sleep 1
NS_CHECK_EXEC([at_ns0], [python3 $srcdir/gtp-packet.py 172.31.1.1 172.31.1.100 2001::1 2001::2 5555 p0 False 1234 2>/dev/null], [0], [dnl
.
Sent 1 packets.
])

AT_CHECK([ovs-ofctl dump-flows br0 | ofctl_strip | grep ipv6 ], [0], [dnl
 priority=100,ipv6,ipv6_dst=2001::1 actions=output:1
 n_packets=1, n_bytes=63, priority=100,ipv6,ipv6_dst=2001::2 actions=drop
])

NS_CHECK_EXEC([at_ns0], [tcpdump -l -n -xx -U ip host 172.31.1.1 -i p0 > ipv6_xmit.pcap  2>/dev/null &])

sleep 1
AT_CHECK([ping -6 2001::1 -q -c 3 -I br0 2>/dev/null | FORMAT_PING], [0], [dnl
3 packets transmitted, 0 received, 100% packet loss, time 0ms
])

OVS_WAIT_UNTIL([cat ipv6_xmit.pcap | egrep "IP 172.31.1.100.2152 > 172.31.1.1.2152: UDP, length 112" 2>&1 1>/dev/null])

AT_CHECK([ovs-ofctl dump-flows br0 | ofctl_strip | grep ipv6 ], [0], [dnl
 n_packets=3, n_bytes=354, priority=100,ipv6,ipv6_dst=2001::1 actions=output:1
 n_packets=1, n_bytes=63, priority=100,ipv6,ipv6_dst=2001::2 actions=drop
])

dnl sleep 1000
OVS_TRAFFIC_VSWITCHD_STOP
AT_CLEANUP


AT_SETUP([layer3 - IPv4 packets over IPv6 GTP])
OVS_TRAFFIC_VSWITCHD_START([set Bridge br0 other-config:hwaddr="00:12:34:56:78:bb"])
OVS_CHECK_GTP_L3()
OVS_CHECK_MIN_KERNEL(4,10)

ADD_BR([br-underlay])

ADD_NAMESPACES(at_ns0)

dnl Set up underlay link from host into the namespace using veth pair.
ADD_VETH(p0, at_ns0, br-underlay, "fc00::55:0:111/48")
AT_CHECK([ip -6 addr add dev br-underlay "fc00::55:0:211/48"])
AT_CHECK([ip -6 link set dev br-underlay up])

AT_CHECK([modprobe vport_gtp])

dnl Set up tunnel endpoints on OVS outside the namespace and with a native
dnl linux device inside the namespace.

ADD_OVS_TUNNEL([gtpu], [br0], [at_gtp0], [fc00::55:0:111], [10.1.1.2/24])
AT_CHECK([ip neigh add 10.1.1.1 lladdr 00:12:34:56:78:aa dev br0])

dnl NS_CHECK_EXEC([at_ns0], [ip link set dev lo up])
dnl NS_CHECK_EXEC([at_ns0], [ip -6 addr add dev lo 2005:cafe::92/64])

AT_CHECK([ovs-ofctl add-flow br-underlay "actions=normal"])

AT_CHECK([ovs-appctl vlog/set dbg], [0], [ignore])
AT_CHECK([echo 'module openvswitch +p' > /sys/kernel/debug/dynamic_debug/control])

dnl Now add rules for OVS to forward to the tunnel and local port
AT_CHECK([ovs-ofctl add-flow br0 "priority=1 action=drop"])
AT_CHECK([ovs-ofctl add-flow br0 "priority=100 ip,ip_dst=10.1.1.1 action=output:at_gtp0"])
AT_CHECK([ovs-ofctl add-flow br0 "priority=100 ip,ip_dst=10.1.1.2 action=drop"])

AT_CHECK([ovs-ofctl dump-flows br0 | grep "ip" | ofctl_strip], [0], [dnl
 priority=100,ip,nw_dst=10.1.1.1 actions=output:1
 priority=100,ip,nw_dst=10.1.1.2 actions=drop
])

sleep 1
NS_CHECK_EXEC([at_ns0], [python3 $srcdir/gtp-packet.py fc00::55:0:111 fc00::55:0:211 10.1.1.1 10.1.1.2 5555 p0 False 1234 2>/dev/null], [0], [dnl
.
Sent 1 packets.
])

AT_CHECK([ovs-ofctl dump-flows br0 | ofctl_strip | grep ip ], [0], [dnl
 priority=100,ip,nw_dst=10.1.1.1 actions=output:1
 n_packets=1, n_bytes=43, priority=100,ip,nw_dst=10.1.1.2 actions=drop
])

NS_CHECK_EXEC([at_ns0], [tcpdump -l -n -xx -U ip6 host fc00::55:0:111 -i p0 > ipv6_xmit.pcap  2>/dev/null &])

sleep 1
AT_CHECK([ping  10.1.1.1 -q -c 3 -I br0 2>/dev/null | FORMAT_PING], [0], [dnl
3 packets transmitted, 0 received, 100% packet loss, time 0ms
])

OVS_WAIT_UNTIL([cat ipv6_xmit.pcap | egrep "IP6 fc00::55:0:211.2152 > fc00::55:0:111.2152: UDP, length 92" 2>&1 1>/dev/null])

AT_CHECK([ovs-ofctl dump-flows br0 | ofctl_strip | grep ip ], [0], [dnl
 n_packets=3, n_bytes=294, priority=100,ip,nw_dst=10.1.1.1 actions=output:1
 n_packets=1, n_bytes=43, priority=100,ip,nw_dst=10.1.1.2 actions=drop
])

dnl sleep 1000
OVS_TRAFFIC_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([layer3 - GTP echo match test])
OVS_TRAFFIC_VSWITCHD_START([set Bridge br0 other-config:hwaddr="00:12:34:56:78:bb"])

ADD_BR([br-underlay])

ADD_NAMESPACES(at_ns0)

dnl Set up underlay link from host into the namespace using veth pair.
ADD_VETH(p0, at_ns0, br-underlay, "172.31.1.1/24")
AT_CHECK([ip addr add dev br-underlay "172.31.1.100/24"])
AT_CHECK([ip link set dev br-underlay up])

dnl Set up tunnel endpoints on OVS outside the namespace and with a native
dnl linux device inside the namespace.

AT_CHECK([modprobe vport_gtp])
ADD_OVS_TUNNEL([gtpu], [br0], [at_gtp0], [172.31.1.1], [10.1.1.2/24])
AT_CHECK([ip neigh add 10.1.1.1 lladdr 00:12:34:56:78:aa dev br0])

NS_CHECK_EXEC([at_ns0], [ip link set dev p0 mtu 1480 up])

AT_CHECK([ovs-ofctl add-flow br-underlay "actions=normal"])

AT_CHECK([ovs-ofctl add-flow br0 "priority=100 in_port=at_gtp0,tun_gtpu_msgtype=1,tun_gtpu_flags=0x32 action=drop"])

dnl First, check the underlay
NS_CHECK_EXEC([at_ns0], [ping -q -c 3 -i 0.3 -w 2 172.31.1.100 | FORMAT_PING], [0], [dnl
3 packets transmitted, 3 received, 0% packet loss, time 0ms
])

dnl AT_CHECK([ovs-appctl vlog/set dbg], [0], [ignore])
dnl AT_CHECK([echo 'module openvswitch +p' > /sys/kernel/debug/dynamic_debug/control])

NS_CHECK_EXEC([at_ns0], [test-gtp 172.31.1.100 3201000a0000000000010000ff0003000a01], [0], [ignore])

AT_CHECK([ovs-ofctl dump-flows br0 | ofctl_strip | grep gtpu], [0], [dnl
 n_packets=1, n_bytes=10, priority=100,gtpu_flags=0x32,gtpu_msgtype=1,in_port=1 actions=drop
])

OVS_TRAFFIC_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([layer3 - IPv6 GTP echo match test])
OVS_TRAFFIC_VSWITCHD_START([set Bridge br0 other-config:hwaddr="00:12:34:56:78:bb"])
OVS_CHECK_GTP_L3()
OVS_CHECK_MIN_KERNEL(4,10)

ADD_BR([br-underlay])

ADD_NAMESPACES(at_ns0)

dnl Set up underlay link from host into the namespace using veth pair.
ADD_VETH(p0, at_ns0, br-underlay, "fc00::55:0:111/48")
AT_CHECK([ip -6 addr add dev br-underlay "fc00::55:0:211/48"])
AT_CHECK([ip -6 link set dev br-underlay up])

AT_CHECK([modprobe vport_gtp])

dnl Set up tunnel endpoints on OVS outside the namespace and with a native
dnl linux device inside the namespace.

ADD_OVS_TUNNEL([gtpu], [br0], [at_gtp0], [fc00::55:0:111], [2001::2/64])
AT_CHECK([ip -6 neigh add 2001::1 lladdr 00:12:34:56:78:aa dev br0])

NS_CHECK_EXEC([at_ns0], [ip link set dev lo up])
NS_CHECK_EXEC([at_ns0], [ip -6 addr add dev lo 2005:cafe::92/64])

AT_CHECK([ovs-ofctl add-flow br-underlay "actions=normal"])

AT_CHECK([ovs-appctl vlog/set dbg], [0], [ignore])
AT_CHECK([echo 'module openvswitch +p' > /sys/kernel/debug/dynamic_debug/control])

AT_CHECK([ovs-ofctl add-flow br0 "priority=100 in_port=at_gtp0,tun_gtpu_msgtype=1,tun_gtpu_flags=0x32 action=drop"])

sleep 1
NS_CHECK_EXEC([at_ns0], [python3 $srcdir/gtp-packet.py fc00::55:0:111 fc00::55:0:211 2001::1 2001::2 5555 p0 True 1234 2>/dev/null], [0], [dnl
.
Sent 1 packets.
])

AT_CHECK([ovs-ofctl dump-flows br0 | ofctl_strip | grep gtpu], [0], [dnl
 n_packets=1, n_bytes=4, priority=100,gtpu_flags=0x32,gtpu_msgtype=1,in_port=1 actions=drop
])

dnl sleep 1000
OVS_TRAFFIC_VSWITCHD_STOP
AT_CLEANUP


AT_SETUP([layer3 - GTP echo response test])
OVS_TRAFFIC_VSWITCHD_START([set Bridge br0 other-config:hwaddr="00:12:34:56:78:bb"])

ADD_BR([br-underlay])

ADD_NAMESPACES(at_ns0)

dnl Set up underlay link from host into the namespace using veth pair.
ADD_VETH(p0, at_ns0, br-underlay, "172.31.1.1/24")
AT_CHECK([ip addr add dev br-underlay "172.31.1.100/24"])
AT_CHECK([ip link set dev br-underlay up])
AT_CHECK([modprobe vport_gtp])

dnl Set up tunnel endpoints on OVS outside the namespace and with a native
dnl linux device inside the namespace.

ADD_OVS_TUNNEL([gtpu], [br0], [at_gtp0], [172.31.1.1], [10.1.1.2/24], [options:local_ip=172.31.1.100])
AT_CHECK([ip neigh add 10.1.1.1 lladdr 00:12:34:56:78:aa dev br0])

NS_CHECK_EXEC([at_ns0], [ip link set dev p0 mtu 1480 up])
AT_CHECK([ovs-vsctl set interface at_gtp0 bfd:min_tx=5000 bfd:min_rx=5000])
AT_CHECK([ovs-vsctl set interface at_gtp0 bfd:enable=true])

AT_CHECK([ovs-ofctl add-flow br-underlay "actions=normal"])

AT_CHECK([ovs-appctl vlog/set dbg], [0], [ignore])
AT_CHECK([echo 'module openvswitch +p' > /sys/kernel/debug/dynamic_debug/control])

dnl sleep 1000
AT_CHECK([ovs-appctl tnl/gtp_echo_remote_end_points], [0], [dnl
Tunnel port: at_gtp0
])  

NS_CHECK_EXEC([at_ns0], [test-gtp 172.31.1.100 3201000a0000000000010000ff0003000a01], [0], [ignore])
sleep 1
AT_CHECK([ovs-appctl tnl/gtp_echo_remote_end_points | sed -e  's/^.*: RX/RX/'], [0], [dnl
Tunnel port: at_gtp0
RX: 1 TX: 1 remote ip: 172.31.1.1, seq 1, pending send 0
])  

NS_CHECK_EXEC([at_ns0], [tcpdump -l -n -xx -U udp -i p0 > p1.pcap &])
sleep 1

NS_CHECK_EXEC([at_ns0], [test-gtp 172.31.1.100 3201000a0000000000030000ff0003000a01], [0], [ignore])
sleep 2
AT_CHECK([ovs-appctl tnl/gtp_echo_remote_end_points | sed -e  's/^.*: RX/RX/'], [0], [dnl
Tunnel port: at_gtp0
RX: 2 TX: 2 remote ip: 172.31.1.1, seq 3, pending send 0
])
dnl sleep 1000
OVS_WAIT_UNTIL([cat p1.pcap | egrep "IP 172.31.1.100.2152 > 172.31.1.1.2152: UDP, length 14" 2>&1 1>/dev/null])
OVS_WAIT_UNTIL([cat p1.pcap | egrep "0x0000:.*0800 4500"                                     2>&1 1>/dev/null])
OVS_WAIT_UNTIL([cat p1.pcap | egrep "0x0010:.*ac1f 0164 ac1f"       2>&1 1>/dev/null])
OVS_WAIT_UNTIL([cat p1.pcap | egrep "0x0020:  0101 0868 0868 0016 0000 3202 0006 0000"       2>&1 1>/dev/null])
OVS_WAIT_UNTIL([cat p1.pcap | egrep "0x0030:  0000 0003 0000 0e00"                           2>&1 1>/dev/null])
 
OVS_TRAFFIC_VSWITCHD_STOP
AT_CLEANUP


AT_SETUP([layer3 - IPv6 GTP echo response test])
OVS_TRAFFIC_VSWITCHD_START([set Bridge br0 other-config:hwaddr="00:12:34:56:78:bb"])

ADD_BR([br-underlay])

ADD_NAMESPACES(at_ns0)

dnl Set up underlay link from host into the namespace using veth pair.
ADD_VETH(p0, at_ns0, br-underlay, "fc00::55:0:111/48")
AT_CHECK([ip -6 addr add dev br-underlay "fc00::55:0:211/48"])
AT_CHECK([ip -6 link set dev br-underlay up])
AT_CHECK([modprobe vport_gtp])

dnl Set up tunnel endpoints on OVS outside the namespace and with a native
dnl linux device inside the namespace.

ADD_OVS_TUNNEL([gtpu], [br0], [at_gtp0], [fc00::55:0:111], [2001::2/64], [options:local_ip=fc00::55:0:211])
AT_CHECK([ip -6 neigh add 2001::1 lladdr 00:12:34:56:78:aa dev br0])

NS_CHECK_EXEC([at_ns0], [ip link set dev p0 mtu 1480 up])
AT_CHECK([ovs-vsctl set interface at_gtp0 bfd:min_tx=5000 bfd:min_rx=5000])
AT_CHECK([ovs-vsctl set interface at_gtp0 bfd:enable=true])

NS_CHECK_EXEC([at_ns0], [ip link set dev lo up])
NS_CHECK_EXEC([at_ns0], [ip -6 addr add dev lo 2005:cafe::92/64])

AT_CHECK([ovs-ofctl add-flow br-underlay "actions=normal"])

AT_CHECK([ovs-appctl vlog/set dbg], [0], [ignore])
AT_CHECK([echo 'module openvswitch +p' > /sys/kernel/debug/dynamic_debug/control])

dnl sleep 1000
AT_CHECK([ovs-appctl tnl/gtp_echo_remote_end_points], [0], [dnl
Tunnel port: at_gtp0
])

sleep 1
NS_CHECK_EXEC([at_ns0], [python3 $srcdir/gtp-packet.py fc00::55:0:111 fc00::55:0:211 2001::1 2001::2 5555 p0 True 1 2>/dev/null], [0], [dnl
.
Sent 1 packets.
])
sleep 1

AT_CHECK([ovs-appctl tnl/gtp_echo_remote_end_points | sed -e  's/^.*: RX/RX/'], [0], [dnl
Tunnel port: at_gtp0
RX: 1 TX: 1 remote ip: 0.0.0.0, seq 1, pending send 0
])

NS_CHECK_EXEC([at_ns0], [tcpdump -l -n -xx -U udp -i p0 > p1.pcap &])
sleep 1

NS_CHECK_EXEC([at_ns0], [python3 $srcdir/gtp-packet.py fc00::55:0:111 fc00::55:0:211 2001::1 2001::2 5555 p0 True 3 2>/dev/null], [0], [dnl
.
Sent 1 packets.
])

sleep 2
AT_CHECK([ovs-appctl tnl/gtp_echo_remote_end_points | sed -e  's/^.*: RX/RX/'], [0], [dnl
Tunnel port: at_gtp0
RX: 2 TX: 2 remote ip: 0.0.0.0, seq 3, pending send 0
])

OVS_WAIT_UNTIL([cat p1.pcap | egrep "IP6 fc00::55:0:111.2152 > fc00::55:0:211.2152: UDP, length 12" 2>&1 1>/dev/null])
OVS_WAIT_UNTIL([cat p1.pcap | egrep "0x0000:.*86dd 6000"                                     2>&1 1>/dev/null])
OVS_WAIT_UNTIL([cat p1.pcap | egrep "0x0010:.*0000 0000 0000"       2>&1 1>/dev/null])
OVS_WAIT_UNTIL([cat p1.pcap | egrep "0x0020:  0055 0000 0111 fc00 0000 0000 0000 0000"       2>&1 1>/dev/null])
OVS_WAIT_UNTIL([cat p1.pcap | egrep "0x0030:  0055 0000 0211 0868 0868 0014 c09b 3201"                                2>&1 1>/dev/null])
OVS_WAIT_UNTIL([cat p1.pcap | egrep "0x0040:  0004 0000 0000 0003 0085"                                2>&1 1>/dev/null])

dnl sleep 1000
OVS_TRAFFIC_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([layer3 - GTP echo response test multi endpoint])
OVS_TRAFFIC_VSWITCHD_START([set Bridge br0 other-config:hwaddr="00:12:34:56:78:bb"])

ADD_BR([br-underlay])

ADD_NAMESPACES(at_ns0)
ADD_NAMESPACES(at_ns1)

dnl Set up underlay link from host into the namespace using veth pair.
ADD_VETH(p0, at_ns0, br-underlay, "172.31.1.1/24")
ADD_VETH(p1, at_ns1, br-underlay, "172.31.1.2/24")
AT_CHECK([ip addr add dev br-underlay "172.31.1.100/24"])
AT_CHECK([ip link set dev br-underlay up])

AT_CHECK([modprobe vport_gtp])
dnl Set up tunnel endpoints on OVS outside the namespace and with a native
dnl linux device inside the namespace.

ADD_OVS_TUNNEL([gtpu], [br0], [at_gtp0], [172.31.1.1], [10.1.1.2/24])
ADD_OVS_TUNNEL([gtpu], [br0], [at_gtp1], [172.31.1.2], [10.1.2.2/24])

AT_CHECK([ip neigh add 10.1.1.1 lladdr 00:12:34:56:78:aa dev br0])

NS_CHECK_EXEC([at_ns0], [ip link set dev p0 mtu 1480 up])
NS_CHECK_EXEC([at_ns1], [ip link set dev p1 mtu 1480 up])

AT_CHECK([ovs-vsctl set interface at_gtp0 bfd:min_tx=5000 bfd:min_rx=5000])
AT_CHECK([ovs-vsctl set interface at_gtp0 bfd:enable=true])
AT_CHECK([ovs-vsctl set interface at_gtp1 bfd:enable=false])

AT_CHECK([ovs-ofctl add-flow br-underlay "actions=normal"])

AT_CHECK([ovs-appctl vlog/set dbg], [0], [ignore])
AT_CHECK([echo 'module openvswitch +p' > /sys/kernel/debug/dynamic_debug/control])

AT_CHECK([ovs-appctl tnl/gtp_echo_remote_end_points], [0], [dnl
Tunnel port: at_gtp0
Tunnel port: at_gtp1
])  

NS_CHECK_EXEC([at_ns0], [test-gtp 172.31.1.100 3201000a0000000000010000ff0003000a01], [0], [ignore])
sleep 2
AT_CHECK([ovs-appctl tnl/gtp_echo_remote_end_points | sed -e  's/^.*: RX/RX/'], [0], [dnl
Tunnel port: at_gtp0
RX: 1 TX: 1 remote ip: 172.31.1.1, seq 1, pending send 0
Tunnel port: at_gtp1
])  

NS_CHECK_EXEC([at_ns1], [test-gtp 172.31.1.100 3201000a0000000000030000ff0003000a01], [0], [ignore])
sleep 2
AT_CHECK([ovs-appctl tnl/gtp_echo_remote_end_points | sed -e  's/^.*: RX/RX/'], [0], [dnl
Tunnel port: at_gtp0
RX: 1 TX: 1 remote ip: 172.31.1.1, seq 1, pending send 0
Tunnel port: at_gtp1
])  

AT_CHECK([ovs-vsctl set interface at_gtp1 bfd:min_tx=5000 bfd:min_rx=5000])
AT_CHECK([ovs-vsctl set interface at_gtp1 bfd:enable=true])

NS_CHECK_EXEC([at_ns1], [test-gtp 172.31.1.100 3201000a0000000000030000ff0003000a01], [0], [ignore])
sleep 2
AT_CHECK([ovs-appctl tnl/gtp_echo_remote_end_points | sed -e  's/^.*: RX/RX/'], [0], [dnl
Tunnel port: at_gtp0
Tunnel port: at_gtp1
RX: 1 TX: 1 remote ip: 172.31.1.2, seq 3, pending send 0
])  


NS_CHECK_EXEC([at_ns0], [test-gtp 172.31.1.100 3201000a0000000000040000ff0003000a01], [0], [ignore])
sleep 2
AT_CHECK([ovs-appctl tnl/gtp_echo_remote_end_points | sed -e  's/^.*: RX/RX/'], [0], [dnl
Tunnel port: at_gtp0
RX: 1 TX: 1 remote ip: 172.31.1.1, seq 4, pending send 0
Tunnel port: at_gtp1
RX: 1 TX: 1 remote ip: 172.31.1.2, seq 3, pending send 0
])  

OVS_TRAFFIC_VSWITCHD_STOP
AT_CLEANUP


AT_SETUP([layer3 - IPv6 GTP echo response test multi endpoint])
OVS_TRAFFIC_VSWITCHD_START([set Bridge br0 other-config:hwaddr="00:12:34:56:78:bb"])

ADD_BR([br-underlay])

ADD_NAMESPACES(at_ns0)
ADD_NAMESPACES(at_ns1)

dnl Set up underlay link from host into the namespace using veth pair.
ADD_VETH(p0, at_ns0, br-underlay, "fc00::55:0:111/48")
ADD_VETH(p1, at_ns1, br-underlay, "fc00::55:0:112/48")
AT_CHECK([ip -6 addr add dev br-underlay "fc00::55:0:211/48"])
AT_CHECK([ip -6 link set dev br-underlay up])
AT_CHECK([modprobe vport_gtp])

dnl Set up tunnel endpoints on OVS outside the namespace and with a native
dnl linux device inside the namespace.

ADD_OVS_TUNNEL([gtpu], [br0], [at_gtp0], [fc00::55:0:111], [2001::2/64], [options:local_ip=fc00::55:0:211])
ADD_OVS_TUNNEL([gtpu], [br0], [at_gtp1], [fc00::55:0:112], [2021::2/64], [options:local_ip=fc00::55:0:211])

AT_CHECK([ip -6 neigh add 2001::1 lladdr 00:12:34:56:78:aa dev br0])

NS_CHECK_EXEC([at_ns0], [ip link set dev p0 mtu 1480 up])
NS_CHECK_EXEC([at_ns1], [ip link set dev p1 mtu 1480 up])

AT_CHECK([ovs-vsctl set interface at_gtp0 bfd:min_tx=5000 bfd:min_rx=5000])
AT_CHECK([ovs-vsctl set interface at_gtp0 bfd:enable=true])
AT_CHECK([ovs-vsctl set interface at_gtp1 bfd:enable=false])

AT_CHECK([ovs-ofctl add-flow br-underlay "actions=normal"])

AT_CHECK([ovs-appctl vlog/set dbg], [0], [ignore])
AT_CHECK([echo 'module openvswitch +p' > /sys/kernel/debug/dynamic_debug/control])

AT_CHECK([ovs-appctl tnl/gtp_echo_remote_end_points], [0], [dnl
Tunnel port: at_gtp0
Tunnel port: at_gtp1
])

sleep 1
NS_CHECK_EXEC([at_ns0], [python3 $srcdir/gtp-packet.py fc00::55:0:111 fc00::55:0:211 2001::1 2001::2 5555 p0 True 1 2>/dev/null], [0], [dnl
.
Sent 1 packets.
])
sleep 2
AT_CHECK([ovs-appctl tnl/gtp_echo_remote_end_points | sed -e  's/^.*: RX/RX/'], [0], [dnl
Tunnel port: at_gtp0
RX: 1 TX: 1 remote ip: 0.0.0.0, seq 1, pending send 0
Tunnel port: at_gtp1
])

NS_CHECK_EXEC([at_ns1], [python3 $srcdir/gtp-packet.py fc00::55:0:112 fc00::55:0:211 2001::1 2001::2 5555 p1 True 1 2>/dev/null], [0], [dnl
.
Sent 1 packets.
])
sleep 2
AT_CHECK([ovs-appctl tnl/gtp_echo_remote_end_points | sed -e  's/^.*: RX/RX/'], [0], [dnl
Tunnel port: at_gtp0
RX: 1 TX: 1 remote ip: 0.0.0.0, seq 1, pending send 0
Tunnel port: at_gtp1
])

AT_CHECK([ovs-vsctl set interface at_gtp1 bfd:min_tx=5000 bfd:min_rx=5000])
AT_CHECK([ovs-vsctl set interface at_gtp1 bfd:enable=true])

NS_CHECK_EXEC([at_ns1], [python3 $srcdir/gtp-packet.py fc00::55:0:112 fc00::55:0:211 2001::1 2001::2 5555 p1 True 3 2>/dev/null], [0], [dnl
.
Sent 1 packets.
])
sleep 2
AT_CHECK([ovs-appctl tnl/gtp_echo_remote_end_points | sed -e  's/^.*: RX/RX/'], [0], [dnl
Tunnel port: at_gtp0
Tunnel port: at_gtp1
RX: 1 TX: 1 remote ip: 0.0.0.0, seq 3, pending send 0
])


NS_CHECK_EXEC([at_ns0], [python3 $srcdir/gtp-packet.py fc00::55:0:111 fc00::55:0:211 2001::1 2001::2 5555 p0 True 4 2>/dev/null], [0], [dnl
.
Sent 1 packets.
])
sleep 2
AT_CHECK([ovs-appctl tnl/gtp_echo_remote_end_points | sed -e  's/^.*: RX/RX/'], [0], [dnl
Tunnel port: at_gtp0
RX: 1 TX: 1 remote ip: 0.0.0.0, seq 4, pending send 0
Tunnel port: at_gtp1
RX: 1 TX: 1 remote ip: 0.0.0.0, seq 3, pending send 0
])

dnl sleep 1000
OVS_TRAFFIC_VSWITCHD_STOP
AT_CLEANUP


AT_SETUP([layer3 - GTP end marker test])
OVS_TRAFFIC_VSWITCHD_START([set Bridge br0 other-config:hwaddr="00:12:34:56:78:bb"])
OVS_CHECK_GTP_L3()
OVS_CHECK_MIN_KERNEL(4,10)
ADD_BR([br-underlay])

ADD_NAMESPACES(at_ns0)

dnl Set up underlay link from host into the namespace using veth pair.
ADD_VETH(p0, at_ns0, br-underlay, "172.31.1.1/24")
AT_CHECK([ip addr add dev br-underlay "172.31.1.100/24"])
AT_CHECK([ip link set dev br-underlay up])

AT_CHECK([modprobe vport_gtp])
dnl Set up tunnel endpoints on OVS outside the namespace and with a native
dnl linux device inside the namespace.

ADD_OVS_TUNNEL([gtpu], [br0], [at_gtp0], [172.31.1.1], [10.1.1.2/24], [options:key=flow])
AT_CHECK([ip neigh add 10.1.1.1 lladdr 00:12:34:56:78:aa dev br0])
NS_CHECK_EXEC([at_ns0], [gtp-link add at_gtp1 --sgsn &], [0], [ignore])
dnl for 4.9
dnl NS_CHECK_EXEC([at_ns0], [gtp-tunnel add at_gtp1 v1 0 0 10.1.1.2 172.31.1.100], [0], [ignore], [ignore])
NS_CHECK_EXEC([at_ns0], [gtp-tunnel add at_gtp1 v1 0 0 10.1.1.1 172.31.1.100], [0], [ignore], [ignore])
NS_CHECK_EXEC([at_ns0], [ip addr add dev at_gtp1 10.1.1.1/24])
NS_CHECK_EXEC([at_ns0], [ip link set dev at_gtp1 mtu 1450 up])
NS_CHECK_EXEC([at_ns0], [ip link set dev p0 mtu 1480 up])

AT_CHECK([ovs-ofctl add-flow br-underlay "actions=normal"])

AT_CHECK([ovs-appctl vlog/set dbg], [0], [ignore])
AT_CHECK([echo 'module openvswitch +p' > /sys/kernel/debug/dynamic_debug/control])
AT_CHECK([echo 'module gtp +p' > /sys/kernel/debug/dynamic_debug/control])
sleep 1

dnl Now add rules for OVS to forward to the tunnel and local port
AT_CHECK([ovs-ofctl add-flow br0 "priority=1 action=drop"])
AT_CHECK([ovs-ofctl add-flow br0 "priority=100 ip,nw_dst=10.1.1.1 action=output:at_gtp0"])
AT_CHECK([ovs-ofctl add-flow br0 "priority=100 ip,nw_dst=10.1.1.2 action=mod_dl_src:00:12:34:56:78:aa,mod_dl_dst:00:12:34:56:78:bb,local"])
AT_CHECK([ovs-ofctl add-flow br0 "priority=100 table=99,action=set_field:0xfe->tun_gtpu_msgtype,set_field:0x30->tun_gtpu_flags,output:at_gtp0"])

dnl First, check the underlay
NS_CHECK_EXEC([at_ns0], [ping -q -c 3 -i 0.3 -w 2 172.31.1.100 | FORMAT_PING], [0], [dnl
3 packets transmitted, 3 received, 0% packet loss, time 0ms
])

OVS_WAIT_UNTIL([ip netns exec at_ns0 ping -c 1 10.1.1.2])

NS_CHECK_EXEC([at_ns0], [tcpdump -l -n -xx -U udp -i p0 > p1.pcap &])
sleep 1

AT_CHECK([ovs-ofctl -O OpenFlow15 packet-out br0 "in_port=local packet=50540000000a5054000000008000, actions=load:100->tun_id[[0..31]],set_field:172.31.1.1->tun_dst,set_field:0xfe->tun_gtpu_msgtype,set_field:0x30->tun_gtpu_flags,output:at_gtp0"])

sleep 2

OVS_WAIT_UNTIL([cat p1.pcap | egrep "0x0000:.*0800 4500"                                2>&1 1>/dev/null])
OVS_WAIT_UNTIL([cat p1.pcap | egrep "0x0010:.*ac1f 0164 ac1f"                           2>&1 1>/dev/null])
OVS_WAIT_UNTIL([cat p1.pcap | egrep "0x0020:  0101 0868 0868 0010 0000 30fe 0000 0000"  2>&1 1>/dev/null])
OVS_WAIT_UNTIL([cat p1.pcap | egrep "0x0030:  0064"                                     2>&1 1>/dev/null])

OVS_TRAFFIC_VSWITCHD_STOP
AT_CLEANUP


AT_SETUP([layer3 - IPv6 GTP end marker test])
OVS_TRAFFIC_VSWITCHD_START([set Bridge br0 other-config:hwaddr="00:12:34:56:78:bb"])
OVS_CHECK_GTP_L3()
OVS_CHECK_MIN_KERNEL(4,10)
ADD_BR([br-underlay])

ADD_NAMESPACES(at_ns0)

dnl Set up underlay link from host into the namespace using veth pair.
ADD_VETH(p0, at_ns0, br-underlay, "fc00::55:0:111/48")
AT_CHECK([ip -6 addr add dev br-underlay "fc00::55:0:211/48"])
AT_CHECK([ip -6 link set dev br-underlay up])
dnl NS_CHECK_EXEC([at_ns0], [ip -6 route add default dev p0 via fc00::55:0:211])
AT_CHECK([modprobe vport_gtp])

dnl Set up tunnel endpoints on OVS outside the namespace and with a native
dnl linux device inside the namespace.

ADD_OVS_TUNNEL([gtpu], [br0], [at_gtp0], [fc00::55:0:111], [2001::2/64], [options:local_ip=fc00::55:0:211])
AT_CHECK([ip -6 neigh add 2001::1 lladdr 00:12:34:56:78:aa dev br0])

NS_CHECK_EXEC([at_ns0], [ip link set dev p0 mtu 1480 up])
AT_CHECK([ovs-vsctl set interface at_gtp0 bfd:min_tx=5000 bfd:min_rx=5000])
AT_CHECK([ovs-vsctl set interface at_gtp0 bfd:enable=true])

NS_CHECK_EXEC([at_ns0], [ip link set dev lo up])
NS_CHECK_EXEC([at_ns0], [ip -6 addr add dev lo 2005:cafe::92/64])

AT_CHECK([ovs-ofctl add-flow br-underlay "actions=normal"])

AT_CHECK([ovs-appctl vlog/set dbg], [0], [ignore])
AT_CHECK([echo 'module openvswitch +p' > /sys/kernel/debug/dynamic_debug/control])


dnl Now add rules for OVS to forward to the tunnel and local port
AT_CHECK([ovs-ofctl add-flow br0 "priority=1 action=drop"])
AT_CHECK([ovs-ofctl add-flow br0 "priority=100 ip6,ipv6_dst=2001::1 action=output:at_gtp0"])
AT_CHECK([ovs-ofctl add-flow br0 "priority=100 ip6,ipv6_dst=2001::2 action=mod_dl_src:00:12:34:56:78:aa,mod_dl_dst:00:12:34:56:78:bb,local"])
AT_CHECK([ovs-ofctl add-flow br0 "priority=100 table=99,action=set_field:0xfe->tun_gtpu_msgtype,set_field:0x30->tun_gtpu_flags,output:at_gtp0"])


NS_CHECK_EXEC([at_ns0], [python3 $srcdir/gtp-packet.py fc00::55:0:111 fc00::55:0:211 2001::1 2001::2 5555 p0 False 1234 2>/dev/null], [0], [dnl
.
Sent 1 packets.
])
sleep 1

NS_CHECK_EXEC([at_ns0], [tcpdump -l -n -xx -U udp -i p0 > p1.pcap &])
sleep 1

AT_CHECK([ovs-ofctl -O OpenFlow15 packet-out br0 "in_port=local packet=50540000000a5054000000008000, actions=load:100->tun_id[[0..31]],set_field:fc00::55:0:111->tun_ipv6_dst,set_field:0xfe->tun_gtpu_msgtype,set_field:0x30->tun_gtpu_flags,output:at_gtp0"])

OVS_WAIT_UNTIL([cat p1.pcap | egrep "0x0030:  0055 0000 0111 0868 0868 0010 0000 30fe"  2>&1 1>/dev/null])
OVS_WAIT_UNTIL([cat p1.pcap | egrep "0x0040:  0000 0000 0000" 2>&1 1>/dev/null])

dnl sleep 1000
OVS_TRAFFIC_VSWITCHD_STOP
AT_CLEANUP

